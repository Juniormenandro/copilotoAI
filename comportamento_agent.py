from agents import Agent
from pydantic import BaseModel, Field
from copiloto_context import CopilotoContext
from db.comportamento import salvar_comportamento


# üîê Novo schema v√°lido para o agente
class ComportamentoSchema(BaseModel):
    personalidade: str = Field(..., description="Resumo da personalidade do usu√°rio")
    emocao: str = Field(..., description="Emo√ß√£o predominante detectada")
    tra√ßos_comunicacao: str = Field(..., description="Estilo de comunica√ß√£o percebido")
    dores: str = Field(..., description="Dores ou desafios percebidos")
    desejos: str = Field(..., description="Desejos ou aspira√ß√µes percebidas")
    linguagem_preferida: str = Field(..., description="Tipo de linguagem mais adequada")
    tom_recomendado: str = Field(..., description="Tom de comunica√ß√£o ideal")

# üß† Agente de an√°lise comportamental
comportamento_agent = Agent(
    name="Analista Comportamental",
    instructions="""
Voc√™ √© um analista especialista em comportamento humano e comunica√ß√£o emp√°tica.

Com base na mensagem do usu√°rio, extraia o m√°ximo de informa√ß√µes poss√≠veis nos seguintes campos:
- personalidade (resumida em uma frase)
- emo√ß√µes detectadas
- tra√ßos de comunica√ß√£o (ex.: objetivo, ansioso, introspectivo, etc.)
- poss√≠veis dores ou desafios
- poss√≠veis desejos
- tipo de linguagem que parece preferir (ex.: informal, direta, amig√°vel, t√©cnica)
- tom adequado para se comunicar com essa pessoa

Responda com o JSON exato que preencha os campos do schema.
Se n√£o souber, use "?".
""",
    output_type=ComportamentoSchema,
)

# üéØ Fun√ß√£o de execu√ß√£o isolada
async def executor_comportamento(mensagem: str, contexto: CopilotoContext):
    from agents import Runner
    resultado = await Runner.run(comportamento_agent, mensagem, context=contexto)
    dados = resultado.final_output

    print("üß† Resultado do agente de comportamento:", dados)

    # Salva no banco
    salvar_comportamento(contexto.wa_id, dados.model_dump())
    return dados

