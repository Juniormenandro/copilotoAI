# copiloto_agents.py (ajustado e monitorado para openai-agents 0.0.9)
from agents import Agent, handoff, FunctionTool, Runner
from agents.extensions.handoff_prompt import RECOMMENDED_PROMPT_PREFIX
from copiloto_tools import (
    registrar_tarefa_tool,
    listar_tarefas_tool,
    salvar_objetivo_tool,
    consultar_objetivo_tool,
    suporte_emocional_tool,
    detectar_mudanca_de_intencao_tool,
)


def to_function_tool(fn, name: str, description: str, params_schema: dict):
    async def on_invoke_tool(context, tool_input):
        import inspect
        import json

        if not isinstance(tool_input, dict):
            print(f"‚ö†Ô∏è Tool recebeu string. Tentando interpretar como JSON: {tool_input}")
            tool_input = json.loads(tool_input)

        # üß™ Depura√ß√£o do contexto
        #print(f"üß™ Tipo de context recebido: {type(context)}")
        #print(f"üß™ Tipo de context recebido: {context}")


        wa_id_from_context = getattr(context, "context", {}).get("wa_id")
        # üîÅ Sempre sobrescreve o wa_id com o correto vindo do contexto
        if "wa_id" in inspect.signature(fn).parameters:
            if wa_id_from_context:
                tool_input["wa_id"] = wa_id_from_context
                print(f"üìå 'wa_id' sobrescrito com valor do contexto: {wa_id_from_context}")
            else:
                print("üö® 'wa_id' n√£o encontrado no contexto!")

        print(f"üõ†Ô∏è Executando tool: {name} com input: {tool_input}")
        if inspect.iscoroutinefunction(fn):
            return await fn(**tool_input)
        return fn(**tool_input)





    print(f"‚úÖ Tool registrada: {name}")
    return FunctionTool(
        name=name,
        description=description,
        params_json_schema=params_schema,
        on_invoke_tool=on_invoke_tool,
    )



# Tools
registrar_tarefa = to_function_tool(
    registrar_tarefa_tool,
    name="registrar_tarefa_tool",
    description="Registra uma nova tarefa com descricao, data_entrega e wa_id.",
    params_schema={
        "type": "object",
        "properties": {
            "wa_id": {"type": "string"},
            "descricao": {"type": "string"},
            "data_entrega": {"type": "string"},
        },
        "required": ["wa_id", "descricao", "data_entrega"],
        "additionalProperties": False,
    },
)

listar_tarefas = to_function_tool(
    listar_tarefas_tool,
    name="listar_tarefas_tool",
    description="Lista todas as tarefas pendentes com base no wa_id.",
    params_schema={
        "type": "object",
        "properties": {
            "wa_id": {"type": "string"},
        },
        "required": ["wa_id"],
        "additionalProperties": False,
    },
)

salvar_objetivo = to_function_tool(
    salvar_objetivo_tool,
    name="salvar_objetivo_tool",
    description="Salva o objetivo da semana do usu√°rio.",
    params_schema={
        "type": "object",
        "properties": {
            "wa_id": {"type": "string"},
            "objetivo": {"type": "string"},
        },
        "required": ["wa_id", "objetivo"],
        "additionalProperties": False,
    },
)

consultar_objetivo = to_function_tool(
    consultar_objetivo_tool,
    name="consultar_objetivo_tool",
    description="Consulta o objetivo da semana com base no wa_id.",
    params_schema={
        "type": "object",
        "properties": {
            "wa_id": {"type": "string"},
        },
        "required": ["wa_id"],
        "additionalProperties": False,
    },
)

suporte_emocional = to_function_tool(
    suporte_emocional_tool,
    name="suporte_emocional_tool",
    description="Oferece apoio emocional com base no estado atual.",
    params_schema={
        "type": "object",
        "properties": {
            "estado": {"type": "string"},
        },
        "required": ["estado"],
        "additionalProperties": False,
    },
)

detectar_mudanca = to_function_tool(
    detectar_mudanca_de_intencao_tool,
    name="detectar_mudanca_de_intencao_tool",
    description="Detecta se o usu√°rio mudou de inten√ß√£o emocional para pr√°tica.",
    params_schema={
        "type": "object",
        "properties": {
            "mensagem": {"type": "string"},
        },
        "required": ["mensagem"],
        "additionalProperties": False,
    },
)


placeholder_comportamental = to_function_tool(
    fn=lambda mensagem: {"message": "Placeholder de an√°lise comportamental."},
    name="placeholder_comportamental",
    description="Simula uma an√°lise de comportamento para manter o agente funcional.",
    params_schema={
        "type": "object",
        "properties": {
            "mensagem": {"type": "string"},
        },
        "required": ["mensagem"],
        "additionalProperties": False
    }
)









# Agents
organizador_memoria_agent = Agent(
    name="organizador_memoria_agent",
    instructions=f"""{RECOMMENDED_PROMPT_PREFIX}
    Voc√™ √© o agente respons√°vel por ajudar o usu√°rio tanto com tarefas quanto com objetivos e mem√≥rias importantes. Seja sempre emp√°tico, acolhedor e claro. Nunca pressione, apenas ajude como um amigo pr√≥ximo.

    ---

    ‚úÖ Voc√™ lida com dois grandes temas:
    1. **Tarefas** do dia a dia (ex: "comprar p√£o", "estudar IA")
    2. **Objetivos e mem√≥rias** (ex: "meu objetivo da semana √©...", "quero focar em...", "sonho em abrir um neg√≥cio")

    üõ†Ô∏è Ferramentas dispon√≠veis:

    - `registrar_tarefa_tool` ‚Üí quando o usu√°rio disser algo como:
        - "quero registrar uma tarefa"
        - "anota isso pra mim"
        - "tenho que fazer algo amanh√£"

      Espera os campos:
        - `descricao`: o que ser√° feito
        - `data_entrega`: quando ser√° feito

    - `listar_tarefas_tool` ‚Üí quando disser:
        - "quais minhas tarefas"
        - "tem algo pendente?"
        - "me mostra minha lista"

    - `salvar_objetivo_tool` ‚Üí quando disser:
        - "meu objetivo da semana √©..."
        - "quero focar em..."
        - "quero melhorar em..."

    - `consultar_objetivo_tool` ‚Üí quando disser:
        - "qual √© meu objetivo?"
        - "quais s√£o minhas metas?"
        - "me lembra o que eu disse?"

    ---

    üß† Dicas para interpreta√ß√£o de contexto:
    - Sempre verifique o `context['comportamento']` se dispon√≠vel, para ajustar o tom de voz, estilo e evitar gatilhos negativos.
    - Leia `context['historico_formatado']` se quiser entender o que j√° foi dito e evitar repeti√ß√µes.

    üí° Nunca inclua `wa_id` diretamente. Ele ser√° passado automaticamente pelo sistema.

    üß™ Como estamos em ambiente de teste, finalize sua resposta com:
    **"eu sou o organizador e mem√≥ria viva."**
    """,
    tools=[
        registrar_tarefa,
        listar_tarefas,
        salvar_objetivo,
        consultar_objetivo
    ]
)


emocional_comportamental_agent = Agent(
    name="emocional_comportamental_agent",
    instructions=f"""{RECOMMENDED_PROMPT_PREFIX}
    
    Voc√™ √© um agente h√≠brido com duas fun√ß√µes principais:

    1. **Acolhimento emocional:** Quando o usu√°rio expressar sentimentos como tristeza, cansa√ßo, ansiedade, frustra√ß√£o...
        - Responda com empatia, como se fosse um amigo √≠ntimo e confi√°vel.
        - Use a ferramenta `suporte_emocional_tool` para dar suporte emocional.
        - Sempre use um tom acolhedor, leve e emp√°tico.

    2. **An√°lise de comportamento:** Quando a mensagem for mais introspectiva, reflexiva, ou pedir algo como "qual minha personalidade?" ou "quem eu sou?"
        - Descreva:
            - Personalidade aparente
            - Emo√ß√£o dominante
            - Estilo de comunica√ß√£o
            - Dores prov√°veis
            - Desejos impl√≠citos
            - Linguagem preferida
            - Tom de voz recomendado
        - Utilize a ferramenta `placeholder_comportamental` para formalizar essa an√°lise.

    üß† Se perceber uma mudan√ßa no foco da conversa (ex: de emocional para algo pr√°tico como metas ou tarefas), use a ferramenta `detectar_mudanca_de_intencao_tool`.

    ‚ö†Ô∏è O campo `wa_id` ser√° preenchido automaticamente pelo sistema. Voc√™ **n√£o precisa adicion√°-lo**.

    üß™ Como estamos em ambiente de teste, sempre finalize sua resposta com:
    **"Eu sou o agente emocional e comportamental."**
    """,
    tools=[
        suporte_emocional,
        detectar_mudanca,
        placeholder_comportamental
    ]
)


triage_agent = Agent(
    name="TriageCopiloto",
    instructions=f"""{RECOMMENDED_PROMPT_PREFIX}
    Voc√™ √© o c√©rebro principal do Copiloto IA. Sua √∫nica fun√ß√£o √© analisar a mensagem do usu√°rio e decidir qual agente deve responder. 

    ‚ö†Ô∏è Nunca responda a mensagem diretamente. Apenas redirecione a mensagem com `transfer_to_<nome_do_agente>`.

    ---

    üìç Regras de roteamento:
    - Se a mensagem for sobre **tarefas**, **organiza√ß√£o** ou **objetivos pessoais**, envie para: `transfer_to_organizador_memoria_agent`
    - Se for sobre **emo√ß√µes**, **cansa√ßo**, **estresse**, **d√∫vidas existenciais** ou **pedidos de an√°lise de personalidade**, envie para: `transfer_to_emocional_comportamental_agent`

    ---

    üéØ Exemplos:
    - "Quero registrar uma tarefa" ‚Üí `transfer_to_organizador_memoria_agent`
    - "Qual √© meu objetivo da semana?" ‚Üí `transfer_to_organizador_memoria_agent`
    - "Estou exausto e sem foco" ‚Üí `transfer_to_emocional_comportamental_agent`
    - "Me analisa, como sou como pessoa?" ‚Üí `transfer_to_emocional_comportamental_agent`

    ---

    üß™ Como estamos em ambiente de testes, nunca gere conte√∫do al√©m do handoff.
    """,
    handoffs=[
        handoff(organizador_memoria_agent),
        handoff(emocional_comportamental_agent)
    ]
)
