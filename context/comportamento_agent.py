from agents import Agent, Runner # type: ignore
from pydantic import BaseModel, Field # type: ignore
from copilotoAI.context.copiloto_context import CopilotoContext
from db.comportamento import salvar_comportamento
from datetime import datetime


# üîê Schema de output para an√°lise comportamental
class ComportamentoSchema(BaseModel):
    personalidade: str = Field(..., description="Resumo da personalidade do usu√°rio")
    emocao: str = Field(..., description="Emo√ß√£o predominante detectada")
    tra√ßos_comunicacao: str = Field(..., description="Estilo de comunica√ß√£o percebido")
    dores: str = Field(..., description="Dores ou desafios percebidos")
    desejos: str = Field(..., description="Desejos ou aspira√ß√µes percebidas")
    linguagem_preferida: str = Field(..., description="Tipo de linguagem mais adequada")
    tom_recomendado: str = Field(..., description="Tom de comunica√ß√£o ideal")


# üß† Agente especializado em an√°lise comportamental
comportamento_agent = Agent(
    name="Analista Comportamental",
    instructions="""
Voc√™ √© um analista especialista em comportamento humano e comunica√ß√£o emp√°tica.

Sua fun√ß√£o √© analisar a mensagem recebida com base no contexto emocional e hist√≥rico, buscando extrair insights claros e √∫teis sobre a personalidade e estilo do usu√°rio.

---

üéØ Responda preenchendo um JSON com os seguintes campos:
- **personalidade:** resumo da personalidade percebida
- **emocao:** emo√ß√£o predominante ou recorrente
- **tra√ßos_comunicacao:** ex: objetivo, reflexivo, ansioso, desconfiado...
- **dores:** dores, bloqueios ou desafios percebidos
- **desejos:** aspira√ß√µes ou necessidades impl√≠citas
- **linguagem_preferida:** ex: leve, emp√°tica, direta, t√©cnica...
- **tom_recomendado:** como o copiloto deve se comunicar com essa pessoa

---

üìå Dicas:
- Use o hist√≥rico (`context.historico`) e alerta emocional (`context.alerta_emocional`) para identificar padr√µes de repeti√ß√£o ou travas.
- Evite repetir o que o usu√°rio disse. Gere uma an√°lise genu√≠na com base na inten√ß√£o por tr√°s da fala.
- Seja claro, sint√©tico e profundo. Evite respostas gen√©ricas.
- Se n√£o souber algum campo, use "?" como valor.

Exemplo de resposta:
{
  "personalidade": "Reflexivo, curioso e sens√≠vel ao julgamento.",
  "emocao": "Frustra√ß√£o com progresso pessoal",
  "tra√ßos_comunicacao": "Direto e introspectivo",
  "dores": "Autocr√≠tica e falta de clareza nas prioridades",
  "desejos": "Avan√ßar com leveza e prop√≥sito",
  "linguagem_preferida": "Motivacional e acolhedora",
  "tom_recomendado": "Gentil, encorajador e direto ao ponto"
}
""",
    output_type=ComportamentoSchema,
)


# üîÅ Fun√ß√£o que executa o agente e salva o resultado no banco
async def executor_comportamento(mensagem: str, contexto: CopilotoContext):
    resultado = await Runner.run(comportamento_agent, input=mensagem, context=contexto)
    dados = resultado.final_output

    if not dados:
        print("‚ö†Ô∏è Nenhum dado retornado pelo agente de comportamento.")
        return None

    dados_dict = dados.model_dump()
    dados_dict["timestamp"] = datetime.utcnow()

    print("üß† Resultado do agente de comportamento:", dados_dict)
    salvar_comportamento(contexto.wa_id, dados_dict)
    return dados
